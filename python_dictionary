# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages


# test function by updating damages
def huricane_damage(lists):
  conversion = {"M": 1000000,
              "B": 1000000000}
  updated_damages = []            
  for x in lists:
    if x == 'Damages not recorded':
      updated_damages.append(x)
    if x[-1] == 'M':
      updated_damages.append(float(x.strip("M"))*conversion["M"])
    if x[-1] == 'B':
      updated_damages.append(float(x.strip("B"))*conversion["B"])   
  return updated_damages
updated_damages = huricane_damage(damages)
print(updated_damages)

# 2 
# Create a Table
def hurricane_dict(names, months, years, max_sustained_winds, areas_affected, deaths):
  the_dict = {}
  num_hurricanes = len(names)
  for i in range(num_hurricanes):
    the_dict[names[i]] = {"Name":names[i], "Months":months[i], "Year":years[i], "Max Sustained Winds": max_sustained_winds[i], "Areas Affected": areas_affected[i], "Deaths":deaths[i]}
  return the_dict
# Create and view the hurricanes dictionary
new_dict = hurricane_dict(names, months, years, max_sustained_winds, areas_affected, deaths)
print(new_dict)

# 4
# Counting Damaged Areas
area_count = {}
for area in areas_affected:
  for a in area:
    if a not in area_count:
      area_count[a] = 1
    else:
      area_count[a] += 1
print(area_count)      
# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count
def max_area(area_count):
  max_area = 'Colombia'
  num_area = 0
  for area in area_count:
    if area_count[area] > num_area:
      max_area = area
      num_area = area_count[area]
  return max_area, num_area

# find most frequently affected area and the number of hurricanes involved in
max_area, num_area = max_area(area_count)
print(max_area, num_area)

# 6
# Calculating the Deadliest Hurricane
def deadliest_hurricane(new_dict):
  hurricane_name = 'Cuba I'
  num_deaths = 0
  for name in new_dict:
    if new_dict[name]['Deaths'] > num_deaths:
      hurricane_name = name
      num_deaths = new_dict[name]['Deaths']
  return hurricane_name, num_deaths

# find highest mortality hurricane and the number of deaths
hurricane_name, num_deaths = deadliest_hurricane(new_dict)
print(hurricane_name, num_deaths)

# 7
# Rating Hurricanes by Mortality
def hurricanes_mortality(new_dict):
  hurricanes_by_mortality = {0:[], 1:[], 2:[], 3:[], 4:[]}
  for name in new_dict:
    if new_dict[name]['Deaths'] <= 100:
      hurricanes_by_mortality[0].append(name)
    elif new_dict[name]['Deaths'] > 100 and new_dict[name]['Deaths'] <= 500:
      hurricanes_by_mortality[1].append(name)
    elif new_dict[name]['Deaths'] > 500 and new_dict[name]['Deaths'] <= 1000:
      hurricanes_by_mortality[2].append(name)
    elif new_dict[name]['Deaths'] > 1000 and new_dict[name]['Deaths'] <= 10000:
      hurricanes_by_mortality[3].append(name)    
    else:
      hurricanes_by_mortality[4].append(name)   
  return hurricanes_by_mortality

mortality_dict = hurricanes_mortality(new_dict)
print("Mortality dict")
print(mortality_dict)
# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage
damage_dict = {key: value for key, value in zip(names, updated_damages)}
def max_damage_hurricane(the_dict):
  max_damage_hur = ''
  num_damage_hur = 0
  for name in the_dict:
    if the_dict[name] == 'Damages not recorded':
      continue
    if the_dict[name] > num_damage_hur:
      max_damage_hur = name
      num_damage_hur = the_dict[name]
  return max_damage_hur, num_damage_hur

# find highest damage inducing hurricane and its total cost
max_damage_hur, num_damage_hur = max_damage_hurricane(damage_dict)
print(max_damage_hur, num_damage_hur)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def damage_rate(new_dict):
  hurricanes_by_damage = {0:[], 1:[], 2:[], 3:[], 4:[]}
  for name in new_dict:
    if new_dict[name] == 'Damages not recorded':
      continue
    if new_dict[name] <= 100000000:
      hurricanes_by_damage[0].append(name)
    elif new_dict[name] > 100000000 and new_dict[name] <= 1000000000:
      hurricanes_by_damage[1].append(name)
    elif new_dict[name] > 1000000000 and new_dict[name] <= 10000000000:
      hurricanes_by_damage[2].append(name)
    elif new_dict[name] > 10000000000 and new_dict[name] <= 50000000000:
      hurricanes_by_damage[3].append(name)    
    else:
      hurricanes_by_damage[4].append(name)   
  return hurricanes_by_damage

damage_dict = damage_rate(damage_dict)
print("damage dict")
print(damage_dict)

